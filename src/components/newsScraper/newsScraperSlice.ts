import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { stat } from 'fs';
import { RootState, AppThunk } from '../../app/store';
import { NewsItem } from './NewsScraper';
import { apiGetNews } from './newsScraperAPI';

export interface NewsState {
    news: NewsItem[];
    status: 'idle' | 'loading' | 'failed';
}

const initialState: NewsState = {
    news: [],
    status: 'idle',
};

export const getNews = createAsyncThunk(
    'newsScraper/getNews',
    // start and end date are a dayjs object
    async ({keyword, startDateString, endDateString, country, maxResults, smartFilter}: {keyword: string, startDateString: string, endDateString: string, country: string, maxResults: number, smartFilter: boolean}) => {
      const response = await apiGetNews(keyword, startDateString, endDateString, country, maxResults, smartFilter);
      return response?.data || {};
    }
  );
  
export const newsScraperSlice = createSlice({
    name: 'news',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
        .addCase(getNews.pending, (state) => {
            state.status = 'loading';
        })
        .addCase(getNews.fulfilled, (state, action) => {
            state.status = 'idle';
            // sort by date
            action.payload.sort((a: NewsItem, b: NewsItem) => {
                return new Date(b.publishedDate).getTime() - new Date(a.publishedDate).getTime();
            });
            // add field publishedDateStr to each item showing only the date, not the time
            action.payload.forEach((item: NewsItem) => {
                item.publishedDateStr = new Date(item.publishedDate).toLocaleDateString();
            });
            state.news = action.payload;
        })
        .addCase(getNews.rejected, (state) => {
            state.status = 'failed';
        })
    },
});

export const selectNews = (state: RootState) => state.newsScraper.news;

export default newsScraperSlice.reducer;