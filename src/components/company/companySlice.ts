import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { apiGetFullText } from './companyAPI';

export interface BodyState {
  fullText: string;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: BodyState = {
    fullText: "",
    status: 'idle',
};

export const getFullText = createAsyncThunk(
  'company/getFullText',
  async ({company, filename}: {company: string, filename: string}) => {
    const response = await apiGetFullText(company, filename);
    return response?.data || "";
  }
);

export const companySlice = createSlice({
  name: 'company',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getFullText.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getFullText.fulfilled, (state, action) => {
        state.status = 'idle';
        state.fullText = action.payload;
      })
      .addCase(getFullText.rejected, (state) => {
        state.status = 'failed';
      })
  },
});

export const fullText = (state: RootState) => state.company.fullText;

export default companySlice.reducer;
