import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { apiGetBaseQAs } from './bodyAPI';
import { CompanyProps } from '../company/Company';

export interface BodyState {
  companyOptions: string[];
  baseQAs: CompanyProps[];
  status: 'idle' | 'loading' | 'failed';
}

const initialState: BodyState = {
  companyOptions: [],
  baseQAs: [],
  status: 'idle',
};

export const getBaseQAs = createAsyncThunk(
    'body/getBaseQAs',
    async ({question, companies, summarize}: {question: string, companies: string[], summarize: boolean}) => {
      const response = await apiGetBaseQAs(question, companies, summarize);
      return response?.data || [];
    }
);

export const bodySlice = createSlice({
  name: 'body',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      // getBaseQAs
      .addCase(getBaseQAs.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getBaseQAs.fulfilled, (state, action) => {
        state.status = 'idle';
        console.log("base qas", action.payload)
        state.baseQAs = action.payload;
      })
      .addCase(getBaseQAs.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const companyOptions = (state: RootState) => state.body.companyOptions;
export const isLoadingState = (state: RootState) => (state.body.status === 'loading' || 
  state.company.status === 'loading' ||
  state.newsScraper.status === 'loading');
export const baseQAs = (state: RootState) => state.body.baseQAs;

export default bodySlice.reducer;
