import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { apiGetEmailDraft } from './companyResultsAPI';

export interface CompanyResultsState {
  emailSubject: string;
  emailBody: string;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: CompanyResultsState = {
    emailSubject: '',
    emailBody: '',
    status: 'idle',
};

export const getEmailDraft = createAsyncThunk(
  'companyResults/getEmailDraft',
  async ({company, summary}: {company: string, summary: string}) => {
    const response = await apiGetEmailDraft(company, summary);
    return response?.data || {};
  }
);

export const companyResultsSlice = createSlice({
  name: 'companyResults',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getEmailDraft.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getEmailDraft.fulfilled, (state, action) => {
        state.status = 'idle';
        console.log("action", action)
        if (action.payload.length >= 2) {
          state.emailSubject = action.payload[0];
          state.emailBody = action.payload[1];
        }
      })
      .addCase(getEmailDraft.rejected, (state) => {
        state.status = 'failed';
      })
  },
});

export const selectSubject = (state: RootState) => state.companyResults.emailSubject;
export const selectBody = (state: RootState) => state.companyResults.emailBody;

export default companyResultsSlice.reducer;
